import /init.usb.rc
import /init.usb.configfs.rc
import /init.recovery.hlthchrg.rc
import /init.recovery.vold_decrypt.rc


on early-init
	
    # Shouldn't be necessary, but sdcard won't start without it. http://b/22568628.
    mkdir /mnt 0775 root system	

service prepprops /sbin/setprop.sh
    oneshot
    seclabel u:r:recovery:s0
	
on fs
    start fixlinks
	install_keyring

service fixlinks /sbin/fixlinks.sh
    oneshot
    disabled
seclabel u:r:recovery:s0

on fs
    wait /dev/block/bootdevice/by-name/system
    wait /dev/block/bootdevice/by-name/vendor
    wait /dev/block/bootdevice/by-name/userdata
    #wait /dev/block/bootdevice/by-name/vbmeta
    #mount_all /vendor/etc/fstab.${ro.hardware}
    #mount_all /fstab.${ro.hardware}
    mount ext4 /dev/block/bootdevice/by-name/system /system ro
    mount ext4 /dev/block/bootdevice/by-name/vendor /vendor ro
    #mount_all /fstab.${ro.hardware}.data	
    
on fs && property:sys.usb.configfs=0
    write /sys/class/android_usb/android0/f_ffs/aliases adb
#   mkdir /dev/usb-ffs 0770 shell shell
#   mkdir /dev/usb-ffs/adb 0770 shell shell
#   mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000

    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 18D1
    write /sys/class/android_usb/android0/idProduct D001
#   write /sys/class/android_usb/android0/f_ffs/aliases adb
    write /sys/class/android_usb/android0/functions adb
    write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    write /sys/class/android_usb/android0/iProduct ${ro.product.model}
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}
    
# Mount filesystems and start core system services.
on late-init
    start prepprops

    # Mount fstab in init.{$device}.rc by mount_all command. Optional parameter
    # '--early' can be specified to skip entries with 'latemount'.
    # /system and /vendor must be mounted by the end of the fs stage,
    # while /data is optional.
    trigger fs
    trigger cust_parse_action
    trigger post-fs

    # Mount fstab in init.{$device}.rc by mount_all with '--late' parameter
    # to only mount entries with 'latemount'. This is needed if '--early' is
    # specified in the previous mount_all command on the fs stage.
    # With /system mounted and properties form /system + /factory available,
    # some services can be started.
    trigger late-fs
    trigger update_wifionly_identity_action
	
    # Now we can mount /data. File encryption requires keymaster to decrypt
    # /data, which in turn can only be loaded when system properties are present.
    trigger post-fs-data
    start recovery
   
#init.kirin970.rc
on fs
    # mount mtd partitions

    restorecon /splash2
    chmod 775 /splash2
    chown root system /splash2

    mkdir /splash2/log 0775 system log
    symlink /splash2/fac_log /data/log/fac_log
    symlink /splash2 /log

    setprop ro.crypto.fuse_sdcard true	

on post-fs
    # Load properties from
    #     /system/build.prop,
    #     /odm/build.prop,
    #     /vendor/build.prop and
    #     /factory/factory.prop
    #load_system_props
    # start essential services
	#stop oeminfo_nvm
    start servicemanager
    start hwservicemanager
    #start vndservicemanager

    # Mount default storage into root namespace
    mount none /mnt/runtime/default /storage bind rec
    mount none none /storage slave rec

    # We chown/chmod /cache again so because mount is run as root + defaults
    chown system cache /cache
    chmod 0770 /cache
    # We restorecon /cache in case the cache partition has been reset.
    restorecon_recursive /cache

    # Create /cache/recovery in case it's not there. It'll also fix the odd
    # permissions if created by the recovery system.
    mkdir /cache/recovery 0770 system cache

    # create the lost+found directories, so as to enforce our permissions
    mkdir /cache/lost+found 0770 root root

on boot
   # Start standard binderized HAL daemons
    class_start hal

    class_start core
    
    setprop sys.boot_completed 1

## Daemon processes to be run by init.##
#service ueventd /sbin/ueventd
   # class core
    #critical
    #seclabel u:r:ueventd:s0
